- name: Process role input values
  set_fact:
    processed_role_input: |
      {% set ns = namespace(processed_role_input={'get_acceptable_error_codes':[]}) -%}
      {% set dud = ns.processed_role_input.update(role_input) -%}
      {% if  'dry_run' not in ns.processed_role_input -%}
        {% set dud = ns.processed_role_input.update({'dry_run': false }) -%}
      {%- endif %}
      {% set dud = ns.processed_role_input['get_acceptable_error_codes'].extend([0]) -%}
      {% set dud = ns.processed_role_input['get_acceptable_error_codes'].extend(role_input['resource_missing_errorcode']) -%}
      {{ ns.processed_role_input }}

- name: Get entity
  delegate_to: localhost
  citrix_adc_nitro_request:
    nsip: "{{ nsip }}"
    nitro_user: "{{ nitro_user }}"
    nitro_pass: "{{ nitro_pass }}"

    nitro_protocol: "{{ nitro_protocol }}"
    validate_certs: "{{ validate_certs }}"

    operation: get
    
    expected_nitro_errorcode: "{{ processed_role_input.get_acceptable_error_codes }}"

    resource: "{{ processed_role_input.resource }}"
    name: "{{ processed_role_input.resource_name }}"

  register: get_result

- name: Set default variables values
  set_fact:
    do_delete: false
    do_create: false
    resource_diff: {}
    match_dict:
      count: 0
      matches: []
      delete_args: {}

- name: Set resource exists flag
  set_fact:
    resource_exists: "{{ get_result.nitro_errorcode == 0 }}"

- name: Search for matching entries
  delegate_to: localhost
  set_fact:
    match_dict: |
      {% set ns = namespace(delete_args={}, res=[], match=false, item_count=0) -%}
      {% for item in get_result.nitro_object -%}
        {% set ns.match = true -%}
        {% for attr in processed_role_input['id_attributes'] -%}
          {% if attr in processed_role_input['resource_attributes'] -%}
            {% set dud2 =  ns.delete_args.update({ attr: processed_role_input['resource_attributes'][attr]}) -%}
            {% if item[attr] != processed_role_input['resource_attributes'][attr] -%}
              {% set ns.match = false -%}
            {%- endif %}
          {%- endif %}
        {%- endfor %}
        {%- if ns.match -%}
          {% set dud = ns.res.append(item) -%}
          {% set ns.item_count = ns.item_count + 1 -%}
        {%- endif %}
      {%- endfor %}
      {{ { 'count': ns.item_count, 'matches': ns.res, 'delete_args': ns.delete_args } }}
  when: resource_exists

- name: Costruct diff
  delegate_to: localhost
  set_fact:
    resource_diff: |
      {% set res = {} -%}
      {% for key in processed_role_input['resource_attributes'].keys() -%}
        {% if key in match_dict['matches'][0] -%}
          {% if match_dict['matches'][0][key] != processed_role_input['resource_attributes'][key] -%}
            {% set res = res.update({ key: { 'ours': processed_role_input['resource_attributes'][key], 'theirs': match_dict['matches'][0][key]}}) -%}
          {%- endif %}
        {%- else -%}
            {% set res = res.update({ key: {'ours': processed_role_input['resource_attributes'][key], 'theirs': none}}) -%}
        {%- endif %}
      {%- endfor %}
      {{ res }}

  when: match_dict['count'] == 1

- name: Set create flag when no binding is found
  set_fact:
    do_create: true
  when:
    - match_dict['count'] == 0

- name: Set create flag when resource has differences
  set_fact:
    do_create: true
  when:
    - resource_diff != {}

- name: Set delete flag
  delegate_to: localhost
  set_fact:
    do_delete: true
  when: 
    - match_dict['count'] == 1
    - resource_diff != {}
    - resource_exists

- name: Set delete args dictionary
  delegate_to: localhost
  set_fact:
    delete_args: "{{ match_dict['delete_args'] }}"

- name: Set output variables
  delegate_to: localhost
  set_fact:
    role_output: |
      {% set ns = namespace(res = {}) -%}
      {% set dud = ns.res.update({'matched_objects': match_dict['matches']}) -%}
      {% set dud = ns.res.update({'object_diff': resource_diff }) -%}
      {% if do_create and do_delete -%}
        {% set dud = ns.res.update({'operation': 'recreate' }) -%}
      {%- elif do_create and not do_delete -%}
        {% set dud = ns.res.update({'operation': 'create' }) -%}
      {%- else -%}
        {% set dud = ns.res.update({'operation': 'none' }) -%}
      {%- endif %}
      {% if match_dict['count'] > 1 -%}
        {% set dud = ns.res.update({'fail_multiple_matches': true }) -%}
      {%- else -%}
        {% set dud = ns.res.update({'fail_multiple_matches': false }) -%}
      {%- endif %}
      {% if not resource_exists -%}
        {% set dud = ns.res.update({'fail_resource_not_found': true }) -%}
      {%- else -%}
        {% set dud = ns.res.update({'fail_resource_not_found': false }) -%}
      {%- endif %}
      {{ ns.res }}

- name: Set role operation
  set_fact:
    role_operation: "{{ role_output.operation }}"

# Do failure checks

- name: Fail if multiple results were found
  delegate_to: localhost
  fail:
    msg: Multiple matches were found
  when: 
    - match_dict['count'] > 1
    - not processed_role_input.dry_run

- name: Fail if resource does not exist
  delegate_to: localhost
  fail:
    msg: No resource was found
  when: 
    - not resource_exists
    - not processed_role_input.dry_run
