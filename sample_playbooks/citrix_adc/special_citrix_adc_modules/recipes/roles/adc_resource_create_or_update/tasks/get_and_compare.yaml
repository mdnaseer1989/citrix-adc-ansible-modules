- name: Process role input values
  set_fact:
    processed_role_input: |
      {% set ns = namespace(processed_role_input={'get_acceptable_error_codes':[]}) -%}
      {% set dud = ns.processed_role_input.update(role_input) -%}
      {% if  'non_updateable_attributes' not in ns.processed_role_input -%}
        {% set dud = ns.processed_role_input.update({'non_updateable_attributes': {} }) -%}
      {%- endif %}
      {% if  'fail_on_non_updateable_conflict' not in ns.processed_role_input -%}
        {% set dud = ns.processed_role_input.update({'fail_on_non_updateable_conflict': false }) -%}
      {%- endif %}
      {% if  'dry_run' not in ns.processed_role_input -%}
        {% set dud = ns.processed_role_input.update({'dry_run': false }) -%}
      {%- endif %}
      {% set dud = ns.processed_role_input['get_acceptable_error_codes'].extend([0]) -%}
      {% set dud = ns.processed_role_input['get_acceptable_error_codes'].extend(role_input['resource_missing_errorcode']) -%}
      {{ ns.processed_role_input }}

- name: Get entity
  delegate_to: localhost
  citrix_adc_nitro_request:
    nsip: "{{ nsip }}"
    nitro_user: "{{ nitro_user }}"
    nitro_pass: "{{ nitro_pass }}"

    nitro_protocol: "{{ nitro_protocol }}"
    validate_certs: "{{ validate_certs }}"

    operation: get
    
    expected_nitro_errorcode: "{{ processed_role_input.get_acceptable_error_codes }}"

    resource: "{{ processed_role_input.resource }}"
    name: "{{ processed_role_input.resource_name }}"
  register: get_result



- name: Set get entity output variables
  set_fact:
    resource_exists: "{{ get_result.nitro_errorcode == 0 }}"
    non_updateable_attributes_conflict: false
    do_create: false
    do_update: false
    do_delete: false

- name: Set do create flag
  set_fact:
    do_create: true
  when: not resource_exists

- name: Set difference dictionary
  delegate_to: localhost
  set_fact:
    difference: {}
  when: not resource_exists

- name: Set difference dictionary
  delegate_to: localhost
  set_fact:
    difference: |
      {% set res = {} -%}
      {% for key in processed_role_input['resource_attributes'].keys() -%}
        {% if key in get_result.nitro_object[0] -%}
          {% if get_result.nitro_object[0][key] != processed_role_input['resource_attributes'][key] -%}
            {% set res = res.update({ key: { 'ours': processed_role_input['resource_attributes'][key], 'theirs': get_result.nitro_object[0][key]}}) -%}
          {%- endif %}
        {%- else -%}
            {% set res = res.update({ key: {'ours': processed_role_input['resource_attributes'][key], 'theirs': none}}) -%}
        {%- endif %}
      {%- endfor %}
      {{ res }}

  when: resource_exists


- name: Set do update variable
  set_fact:
    do_update: true
  when: difference != {}

- name: Process non updateable attributes flag
  set_fact:
    non_updateable_attributes_conflicting_keys: "{{ difference | intersect(processed_role_input.non_updateable_attributes) }}"

- name: Set non updateable attributes flag
  set_fact:
    non_updateable_attributes_conflict: true
  when: "non_updateable_attributes_conflicting_keys != []"

- name: Set do delete flag
  set_fact:
    do_delete: true
  when: "non_updateable_attributes_conflicting_keys != []"


- name: Construct update attributes dictionary by removing all non updateable attributes
  set_fact:
    resource_update_attributes: |
      {% set ns = namespace(res = {}) -%}
      {% for key in processed_role_input['resource_attributes'].keys() -%}
        {% if key not in processed_role_input['non_updateable_attributes'] -%}
            {% set dud = ns.res.update({ key: processed_role_input['resource_attributes'][key] }) -%}
        {%- endif %}
      {%- endfor %}
      {{ ns.res }}

- name: Set output variables
  delegate_to: localhost
  set_fact:
    role_output: |
      {% set ns = namespace(res = {}) -%}
      {% if get_result.nitro_errorcode == 0 -%}
        {% set dud = ns.res.update({'nitro_object': get_result['nitro_object'][0] }) -%}
      {%- else -%}
        {% set dud = ns.res.update({'nitro_object': 'none' }) -%}
      {%- endif %}
      {% if do_create -%}
        {% set dud = ns.res.update({'operation': 'create' }) -%}
      {%- elif do_update and do_delete -%}
        {% set dud = ns.res.update({'operation': 'recreate' }) -%}
      {%- elif do_update and not do_delete -%}
        {% set dud = ns.res.update({'operation': 'update' }) -%}
      {%- else -%}
        {% set dud = ns.res.update({'operation': 'none' }) -%}
      {%- endif %}
      {% set dud = ns.res.update({'resource_difference': difference }) -%}
      {% set dud = ns.res.update({'non_updateable_attributes_conflicting_keys': non_updateable_attributes_conflicting_keys }) -%}
      {% if non_updateable_attributes_conflicting_keys != [] -%}
        {% set dud = ns.res.update({'non_updateable_attributes_conflict': true }) -%}
      {%- else -%}
        {% set dud = ns.res.update({'non_updateable_attributes_conflict': false }) -%}
      {%- endif -%}
      {{ ns.res }}

- name: Set operation for following includes
  set_fact:
    role_operation: "{{ role_output.operation }}"


- name: Fail for non updateable conflict
  fail:
    msg: "Cannot update immutable attribute keys"
  when:
    - processed_role_input.fail_on_non_updateable_conflict
    - non_updateable_attributes_conflict
    - not processed_role_input.dry_run
